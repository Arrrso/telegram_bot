import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –î–∞–Ω–Ω—ã–µ –≤–æ–∫–∑–∞–ª–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---
vokzals = {
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": ["–û–¥–∏–Ω—Ü–æ–≤–æ", "–ö—É–±–∏–Ω–∫–∞", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥", "–¢—Ä–µ—Ö–≥–æ—Ä–∫–∞", "–ì–æ–ª–∏—Ü—ã–Ω–æ", "–¢—É—á–∫–æ–≤–æ", "–ú–æ–∂–∞–π—Å–∫", "–°–µ—Ç—É–Ω—å"],
    "–ö–∞–∑–∞–Ω—Å–∫–∏–π":   ["–ì–æ–ª—É—Ç–≤–∏–Ω", "–õ—é–±–µ—Ä—Ü—ã", "–†–∞–º–µ–Ω—Å–∫–æ–µ", "–®–∞—Ç—É—Ä–∞"],
    "–ö–∏–µ–≤—Å–∫–∏–π":    ["–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–û—á–∞–∫–æ–≤–æ", "–ù–∞—Ä–∞", "–ë–∞–ª–∞–±–∞–Ω–æ–≤–æ", "–û–±–Ω–∏–Ω—Å–∫", "–õ–µ—Å–Ω–æ–π –≥–æ—Ä–æ–¥–æ–∫", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü"],
    "–ö—É—Ä—Å–∫–∏–π":     ["–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–û—á–∞–∫–æ–≤–æ", "–ù–∞—Ä–∞", "–ë–∞–ª–∞–±–∞–Ω–æ–≤–æ", "–û–±–Ω–∏–Ω—Å–∫", "–õ–µ—Å–Ω–æ–π –≥–æ—Ä–æ–¥–æ–∫", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü"],
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π":["–ö—Ä—é–∫–æ–≤–æ", "–•–∏–º–∫–∏", "–ö–ª–∏–Ω", "–°—Ö–æ–¥–Ω—è", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∞—è", "–•–æ–≤—Ä–∏–Ω–æ"],
    "–ü–∞–≤–µ–ª–µ—Ü–∫–∏–π":  ["–°—Ç—É–ø–∏–Ω–æ", "–ë–∏—Ä—é–ª–µ–≤–æ", "–†–∞—Å—Ç–æ—Ä–≥—É–µ–≤–æ", "–ö–∞—à–∏—Ä–∞", "–£–∑—É–Ω–æ–≤–æ", "–ë–∞—Ä—ã–±–∏–Ω–æ"],
    "–†–∏–∂—Å–∫–∏–π":      ["–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫", "–ù–∞—Ö–∞–±–∏–Ω–æ", "–ò—Å—Ç—Ä–∞", "–ù–æ–≤–æ–∏–µ—Ä—É—Å–∞–ª–∏–º—Å–∫–∞—è", "–†—É–º—è–Ω—Ü–µ–≤–æ"],
    "–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π": ["–õ–æ–±–Ω—è", "–î–º–∏—Ç—Ä–æ–≤", "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω–∞—è", "–î—É–±–Ω–∞", "–ë–æ–ª—å—à–∞—è –í–æ–ª–≥–∞", "–ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤–æ", "–í–æ–¥–Ω–∏–∫–∏", "–ö–∞—Ç—É–∞—Ä"],
    "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π":  ["–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–ü—É—à–∫–∏–Ω–æ", "–ú–æ–Ω–∏–Ω–æ", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤", "–§—Ä—è–∑–∏–Ω–æ", "–ë–æ–ª—à–µ–≤–æ", "–ú—ã—Ç–∏—â–∏"]
}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –≤–µ—Å–∞–º–∏ ---
def weighted_station_number() -> int:
    numbers = list(range(10, 31))
    weights = []
    for n in numbers:
        if 14 <= n <= 24:   # —á–∞—â–µ –≤—Å–µ–≥–æ
            weights.append(5)
        elif 10 <= n <= 13: # —Ä–µ–¥–∫–æ
            weights.append(1)
        else:               # 25‚Äì30 ‚Äî —Å—Ä–µ–¥–Ω–µ
            weights.append(3)
    return random.choices(numbers, weights=weights, k=1)[0]

def generate_trip(chosen_vokzal: str | None = None) -> str:
    if chosen_vokzal and chosen_vokzal in vokzals:
        vokzal = chosen_vokzal
    else:
        vokzal = random.choice(list(vokzals.keys()))

    direction = random.choice(vokzals[vokzal])
    station_number = weighted_station_number()

    text = (
        f"–í–∞—à –≤–æ–∫–∑–∞–ª: <b>{vokzal}</b>\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞ ‚Äî <b>{direction}</b>\n"
        f"–°—Ç–∞–Ω—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞: <b>{station_number}</b>\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è! üöÜ"
    )
    return text

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data="random")],
        [InlineKeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª", callback_data="choose")],
        [InlineKeyboardButton("üìå –°–ø–∏—Å–æ–∫ –≤–æ–∫–∑–∞–ª–æ–≤", callback_data="list")],
    ])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –∏ —É–∑–Ω–∞–µ—à—å, –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –ø–æ–µ–¥–µ—à—å üöÜ‚ú®",
        reply_markup=main_menu_keyboard()
    )

async def trip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = generate_trip()
    await update.message.reply_html(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "random":
        text = generate_trip()
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))

    elif data == "list":
        vokzal_list = "\n".join(f"‚Ä¢ {v}" for v in vokzals.keys())
        await query.edit_message_text(
            f"<b>–°–ø–∏—Å–æ–∫ –≤–æ–∫–∑–∞–ª–æ–≤:</b>\n{vokzal_list}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        )

    elif data == "choose":
        keyboard = []
        row = []
        for i, v in enumerate(vokzals.keys(), start=1):
            row.append(InlineKeyboardButton(v, callback_data=f"vokzal:{v}"))
            if i % 3 == 0:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∫–∑–∞–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("vokzal:"):
        vokzal_name = data.split(":", 1)[1]
        text = generate_trip(chosen_vokzal=vokzal_name)
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))

    elif data == "back":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª.",
            reply_markup=main_menu_keyboard()
        )

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")
        return

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("trip", trip_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
