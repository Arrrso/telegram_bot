# bot.py –¥–ª—è Render + webhook, Telegram Bot API v20+
import os
import random
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
WEBHOOK_PATH = f"/webhook/{TOKEN}"  # endpoint –¥–ª—è webhook

# --- –î–∞–Ω–Ω—ã–µ –≤–æ–∫–∑–∞–ª–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---
vokzals = {
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": ["–û–¥–∏–Ω—Ü–æ–≤–æ", "–ö—É–±–∏–Ω–∫–∞", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥", "–¢—Ä–µ—Ö–≥–æ—Ä–∫–∞", "–ì–æ–ª–∏—Ü—ã–Ω–æ", "–¢—É—á–∫–æ–≤–æ", "–ú–æ–∂–∞–π—Å–∫", "–°–µ—Ç—É–Ω—å"],
    "–ö–∞–∑–∞–Ω—Å–∫–∏–π": ["–ì–æ–ª—É—Ç–≤–∏–Ω", "–õ—é–±–µ—Ä—Ü—ã", "–†–∞–º–µ–Ω—Å–∫–æ–µ", "–®–∞—Ç—É—Ä–∞"],
    "–ö–∏–µ–≤—Å–∫–∏–π": ["–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–û—á–∞–∫–æ–≤–æ", "–ù–∞—Ä–∞", "–ë–∞–ª–∞–±–∞–Ω–æ–≤–æ", "–û–±–Ω–∏–Ω—Å–∫", "–õ–µ—Å–Ω–æ–π –≥–æ—Ä–æ–¥–æ–∫", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü"],
    "–ö—É—Ä—Å–∫–∏–π": ["–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ", "–û—á–∞–∫–æ–≤–æ", "–ù–∞—Ä–∞", "–ë–∞–ª–∞–±–∞–Ω–æ–≤–æ", "–û–±–Ω–∏–Ω—Å–∫", "–õ–µ—Å–Ω–æ–π –≥–æ—Ä–æ–¥–æ–∫", "–ú–∞–ª–æ—è—Ä–æ—Å–ª–∞–≤–µ—Ü"],
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π": ["–ö—Ä—é–∫–æ–≤–æ", "–•–∏–º–∫–∏", "–ö–ª–∏–Ω", "–°—Ö–æ–¥–Ω—è", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∞—è", "–•–æ–≤—Ä–∏–Ω–æ"],
    "–ü–∞–≤–µ–ª–µ—Ü–∫–∏–π": ["–°—Ç—É–ø–∏–Ω–æ", "–ë–∏—Ä—é–ª–µ–≤–æ", "–†–∞—Å—Ç–æ—Ä–≥—É–µ–≤–æ", "–ö–∞—à–∏—Ä–∞", "–£–∑—É–Ω–æ–≤–æ", "–ë–∞—Ä—ã–±–∏–Ω–æ"],
    "–†–∏–∂—Å–∫–∏–π": ["–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫", "–ù–∞—Ö–∞–±–∏–Ω–æ", "–ò—Å—Ç—Ä–∞", "–ù–æ–≤–æ–∏–µ—Ä—É—Å–∞–ª–∏–º—Å–∫–∞—è", "–†—É–º—è–Ω—Ü–µ–≤–æ"],
    "–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π": ["–õ–æ–±–Ω—è", "–î–º–∏—Ç—Ä–æ–≤", "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω–∞—è", "–î—É–±–Ω–∞", "–ë–æ–ª—å—à–∞—è –í–æ–ª–≥–∞", "–ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤–æ", "–í–æ–¥–Ω–∏–∫–∏", "–ö–∞—Ç—É–∞—Ä"],
    "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π": ["–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–ü—É—à–∫–∏–Ω–æ", "–ú–æ–Ω–∏–Ω–æ", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤", "–§—Ä—è–∑–∏–Ω–æ", "–ë–æ–ª—à–µ–≤–æ", "–ú—ã—Ç–∏—â–∏"]
}

# --- –ß–∏—Å–ª–∞ —Å —Ä–∞–∑–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ---
numbers = [10]*1 + [11,12,13,14]*3 + list(range(15,24))*6 + list(range(24,31))*4

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ ---
def generate_trip(chosen_vokzal: str | None = None) -> str:
    vokzal = chosen_vokzal if chosen_vokzal in vokzals else random.choice(list(vokzals.keys()))
    direction = random.choice(vokzals[vokzal])
    station_number = random.choice(numbers)
    text = (
        f"–í–∞—à –≤–æ–∫–∑–∞–ª: <b>{vokzal}</b>\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞ ‚Äî <b>{direction}</b>\n"
        f"–°—Ç–∞–Ω—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞: <b>{station_number}</b>\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è! üöÜ"
    )
    return text

# --- –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram ---
application = Application.builder().token(TOKEN).build()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", callback_data="random")],
        [InlineKeyboardButton("üìç –í—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª", callback_data="choose")],
        [InlineKeyboardButton("üìå –°–ø–∏—Å–æ–∫ –≤–æ–∫–∑–∞–ª–æ–≤", callback_data="list")]
    ]
    await update.message.reply_html(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –∏ —É–∑–Ω–∞–µ—à—å –º–∞—Ä—à—Ä—É—Ç üöÜ‚ú®",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "random":
        text = generate_trip()
    elif data == "list":
        text = "<b>–°–ø–∏—Å–æ–∫ –≤–æ–∫–∑–∞–ª–æ–≤:</b>\n" + "\n".join(f"‚Ä¢ {v}" for v in vokzals.keys())
    elif data == "choose":
        keyboard = []
        row = []
        for i, v in enumerate(vokzals.keys(), start=1):
            row.append(InlineKeyboardButton(v, callback_data=f"vokzal:{v}"))
            if i % 3 == 0:
                keyboard.append(row)
                row = []
        if row: keyboard.append(row)
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∫–∑–∞–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    elif data.startswith("vokzal:"):
        vokzal_name = data.split(":",1)[1]
        text = generate_trip(chosen_vokzal=vokzal_name)
    elif data == "back":
        text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–æ–∫–∑–∞–ª."
    else:
        text = "–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))

# --- FastAPI ---
fastapi_app = FastAPI()

@fastapi_app.on_event("startup")
async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await application.initialize()
    webhook_url = os.environ.get("WEBHOOK_URL")
    if webhook_url:
        await application.bot.set_webhook(webhook_url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

@fastapi_app.on_event("shutdown")
async def on_shutdown():
    await application.shutdown()

@fastapi_app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.process_update(update)
    return {"ok": True}

# --- –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(fastapi_app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
