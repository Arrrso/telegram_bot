import os
import random
import logging
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# --- –°–æ–∑–¥–∞—ë–º FastAPI ---
app = FastAPI()

# --- –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ ---
application = Application.builder().token(TOKEN).build()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ", callback_data="random")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üöÇ",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "random":
        number = weighted_random_number()
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
        await query.edit_message_text(
            text=f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {number}",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    elif query.data == "back":
        keyboard = [
            [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ", callback_data="random")]
        ]
        await query.edit_message_text(
            text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üöÇ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

def weighted_random_number():
    # 14‚Äì24 —á–∞—â–µ, 10‚Äì14 —Ä–µ–¥–∫–æ, 24‚Äì30 —Å—Ä–µ–¥–Ω–µ
    weights = []
    for i in range(10, 31):
        if 14 <= i <= 24:
            weights.append(6)
        elif 10 <= i < 14:
            weights.append(1)
        else:  # 25‚Äì30
            weights.append(3)
    return random.choices(range(10, 31), weights=weights, k=1)[0]

# --- –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button))

# --- –†–æ—É—Ç—ã –¥–ª—è Render ---
@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.start()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook/{TOKEN}"
    await application.bot.set_webhook(url)

@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    if token != TOKEN:
        return {"error": "invalid token"}
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}
