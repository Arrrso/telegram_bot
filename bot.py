import os
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from contextlib import asynccontextmanager

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("WEBHOOK_URL")   # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/webhook/<TOKEN>

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

application = Application.builder().token(TOKEN).build()

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üöÄ", reply_markup=reply_markup)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {update.message.text}", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ üîô", reply_markup=reply_markup)

# === –†–æ—É—Ç–∏–Ω–≥ –±–æ—Ç–∞ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
application.add_handler(CallbackQueryHandler(button_handler))

# === FastAPI + Lifespan ===
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await application.bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)
    yield
    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await application.bot.delete_webhook()
    print("üõë Webhook —É–¥–∞–ª—ë–Ω")

app = FastAPI(lifespan=lifespan)

# === Endpoint –¥–ª—è Telegram ===
@app.post("/webhook/{token}")
async def webhook(request: Request, token: str):
    if token != TOKEN:
        return {"status": "forbidden"}  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}
